<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZCL_EXCEL_WRITER_CSV" VERSION="1" LANGU="E" DESCRIPT="Excel writer 2007" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <implementing CLSNAME="ZCL_EXCEL_WRITER_CSV" REFCLSNAME="ZIF_EXCEL_WRITER" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
 <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
 <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <attribute CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="DELIMITER" VERSION="1" LANGU="E" DESCRIPT="Delimiter" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTVALUE="&apos;;&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR01" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="ENCLOSURE" VERSION="1" LANGU="E" DESCRIPT="Text inclusure character" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTVALUE="&apos;&quot;&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR01" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="EOL" VERSION="1" LANGU="E" DESCRIPT="End Of line" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="1" ATTVALUE="CL_ABAP_CHAR_UTILITIES=&gt;CR_LF" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR01" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="EXCEL" VERSION="1" LANGU="E" DESCRIPT="Excel creator" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_EXCEL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="WORKSHEET_INDEX" VERSION="1" LANGU="E" DESCRIPT="Active Worksheet" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZEXCEL_ACTIVE_WORKSHEET" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="WORKSHEET_NAME" VERSION="1" LANGU="E" DESCRIPT="Worksheets name" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZEXCEL_WORKSHEETS_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <interfaceMethod CLSNAME="ZCL_EXCEL_WRITER_CSV" CPDNAME="ZIF_EXCEL_WRITER~WRITE_FILE">
  <source>method ZIF_EXCEL_WRITER~WRITE_FILE.
  me-&gt;excel = io_excel.
  ep_file = me-&gt;create( ).
  endmethod.</source>
 </interfaceMethod>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="CREATE" SCONAME="EP_EXCEL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE.

* .csv format with ; delimiter

   ep_excel = me-&gt;CREATE_CSV( ).

  endmethod.</source>
 </method>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="CREATE_CSV" VERSION="1" LANGU="E" DESCRIPT="Create CSV ; Delimited format" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="CREATE_CSV" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_CSV.

  TYPES: BEGIN OF lty_format,
            cmpname  TYPE SEOCMPNAME,
            attvalue TYPE SEOVALUE,
         END OF lty_format.
  DATA: lt_format TYPE STANDARD TABLE OF lty_format,
        ls_format LIKE LINE OF lt_format,
        lv_date   TYPE DATS,
        lv_tmp    TYPE string,
        lv_time   TYPE CHAR08.

  DATA: lo_iterator       TYPE REF TO cl_object_collection_iterator,
        lo_worksheet      TYPE REF TO zcl_excel_worksheet.

  DATA: lt_cell_data      TYPE zexcel_t_cell_data_unsorted,
        lv_row            TYPE sytabix,
        lv_col            TYPE sytabix,
        lv_string         TYPE string,
        lc_value          TYPE string,
        lv_attrname       TYPE SEOCMPNAME.

  DATA: ls_numfmt         TYPE zexcel_s_style_numfmt,
        lo_style          TYPE REF TO zcl_excel_style.

  FIELD-SYMBOLS: &lt;fs_sheet_content&gt; TYPE zexcel_s_cell_data.

* --- Retrieve supported cell format
  REFRESH lt_format.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_format
    FROM seocompodf
   WHERE clsname  = &apos;ZCL_EXCEL_STYLE_NUMBER_FORMAT&apos;
     AND typtype  = 1
     AND type     = &apos;ZEXCEL_NUMBER_FORMAT&apos;.

* --- Retrieve SAP date format
  CLEAR ls_format.
  SELECT ddtext INTO ls_format-attvalue FROM dd07t WHERE domname    = &apos;XUDATFM&apos;
                                                     AND ddlanguage = sy-langu.
    ls_format-cmpname = &apos;DATE&apos;.
    CONDENSE ls_format-attvalue.
    CONCATENATE &apos;&apos;&apos;&apos; ls_format-attvalue &apos;&apos;&apos;&apos; INTO ls_format-attvalue.
    APPEND ls_format TO lt_format.
  ENDSELECT.


  LOOP AT lt_format INTO ls_format.
    TRANSLATE ls_format-attvalue TO UPPER CASE.
    MODIFY lt_format FROM ls_format.
  ENDLOOP.


* STEP 1: Collect strings from the first worksheet
  lo_iterator = excel-&gt;get_worksheets_iterator( ).
  data: current_worksheet_title type ZEXCEL_SHEET_TITLE.

  WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
    lo_worksheet ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).

    IF worksheet_name IS NOT INITIAL.
      current_worksheet_title = lo_worksheet-&gt;get_title( ).
      CHECK current_worksheet_title = worksheet_name.
    ELSE.
      IF worksheet_index IS INITIAL.
        worksheet_index = 1.
      ENDIF.
      CHECK worksheet_index = sy-index.
    ENDIF.
    APPEND LINES OF lo_worksheet-&gt;sheet_content TO lt_cell_data.
    EXIT. &quot; Take first worksheet only
  ENDWHILE.

  DELETE lt_cell_data WHERE cell_formula IS NOT INITIAL. &quot; delete formula content

  SORT lt_cell_data BY cell_row
                       cell_column.
  lv_row = 1.
  lv_col = 1.
  CLEAR lv_string.
  LOOP AT lt_cell_data ASSIGNING &lt;fs_sheet_content&gt;.

*   --- Retrieve Cell Style format and data type
    CLEAR ls_numfmt.
    IF &lt;fs_sheet_content&gt;-data_type IS INITIAL AND &lt;fs_sheet_content&gt;-cell_style IS NOT INITIAL.
      lo_iterator = excel-&gt;get_styles_iterator( ).
      WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_style ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).
        CHECK lo_style-&gt;get_guid( ) = &lt;fs_sheet_content&gt;-cell_style.
        ls_numfmt     = lo_style-&gt;number_format-&gt;get_structure( ).
        EXIT.
      ENDWHILE.
    ENDIF.
    IF &lt;fs_sheet_content&gt;-data_type IS INITIAL AND ls_numfmt IS NOT INITIAL.
      &quot; determine data-type
      CLEAR lv_attrname.
      CONCATENATE &apos;&apos;&apos;&apos; ls_numfmt-NUMFMT &apos;&apos;&apos;&apos; INTO ls_numfmt-NUMFMT.
      TRANSLATE ls_numfmt-numfmt TO UPPER CASE.
      READ TABLE lt_format INTO ls_format WITH KEY attvalue = ls_numfmt-NUMFMT.
      IF sy-subrc = 0.
        lv_attrname = ls_format-cmpname.
      ENDIF.

      IF lv_attrname IS NOT INITIAL.
        FIND FIRST OCCURRENCE OF &apos;DATETIME&apos; IN lv_attrname.
        IF sy-subrc = 0.
          &lt;fs_sheet_content&gt;-data_type = &apos;d&apos;.
        ELSE.
          FIND FIRST OCCURRENCE OF &apos;TIME&apos; IN lv_attrname.
          IF sy-subrc = 0.
            &lt;fs_sheet_content&gt;-data_type = &apos;t&apos;.
          ELSE.
            FIND FIRST OCCURRENCE OF &apos;DATE&apos; IN lv_attrname.
            IF sy-subrc = 0.
              &lt;fs_sheet_content&gt;-data_type = &apos;d&apos;.
            ELSE.
              FIND FIRST OCCURRENCE OF &apos;CURRENCY&apos; IN lv_attrname.
              IF sy-subrc = 0.
                &lt;fs_sheet_content&gt;-data_type = &apos;n&apos;.
              ELSE.
                FIND FIRST OCCURRENCE OF &apos;NUMBER&apos; IN lv_attrname.
                IF sy-subrc = 0.
                  &lt;fs_sheet_content&gt;-data_type = &apos;n&apos;.
                ELSE.
                  FIND FIRST OCCURRENCE OF &apos;PERCENTAGE&apos; IN lv_attrname.
                  IF sy-subrc = 0.
                    &lt;fs_sheet_content&gt;-data_type = &apos;n&apos;.
                  ENDIF. &quot; Purcentage
                ENDIF. &quot; Number
              ENDIF. &quot; Currency
            ENDIF. &quot; Date
          ENDIF. &quot; TIME
        ENDIF. &quot; DATETIME
      ENDIF. &quot; lv_attrname IS NOT INITIAL.
    ENDIF. &quot; &lt;fs_sheet_content&gt;-data_type IS INITIAL AND ls_numfmt IS NOT INITIAL.

* --- Add empty rows
    WHILE lv_row &lt; &lt;fs_sheet_content&gt;-cell_row.
*      CONCATENATE lv_string cl_abap_char_utilities=&gt;newline INTO lv_string.
*      CONCATENATE lv_string cl_abap_char_utilities=&gt;cr_lf INTO lv_string.
      CONCATENATE lv_string zcl_excel_writer_csv=&gt;eol INTO lv_string.
      lv_row = lv_row + 1.
      lv_col = 1.
    ENDWHILE.

* --- Add empty columns
    WHILE lv_col &lt; &lt;fs_sheet_content&gt;-cell_column.
*      CONCATENATE lv_string &apos;;&apos; INTO lv_string.
      CONCATENATE lv_string zcl_excel_writer_csv=&gt;delimiter INTO lv_string.
      lv_col = lv_col + 1.
    ENDWHILE.

* ----- Use format to determine the data type and display format.
    CASE &lt;fs_sheet_content&gt;-data_type.
*      WHEN &apos;n&apos; OR &apos;N&apos;.
*        lc_value = zcl_excel_common=&gt;excel_number_to_string( ip_value = &lt;fs_sheet_content&gt;-cell_value ).

      WHEN &apos;d&apos; OR &apos;D&apos;.
        lc_value = zcl_excel_common=&gt;excel_string_to_date( ip_value = &lt;fs_sheet_content&gt;-cell_value ).
        TRY.
          lv_date = lc_value.
          CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;
            EXPORTING
              DATE_INTERNAL                  = lv_date
            IMPORTING
              DATE_EXTERNAL                  = lv_tmp
            EXCEPTIONS
              DATE_INTERNAL_IS_INVALID       = 1
              OTHERS                         = 2
                  .
          IF SY-SUBRC = 0.
            lc_value = lv_tmp.
          ENDIF.

        CATCH CX_SY_CONVERSION_NO_NUMBER.

        ENDTRY.

      WHEN &apos;t&apos; OR &apos;T&apos;.
        lc_value = zcl_excel_common=&gt;excel_string_to_time( ip_value = &lt;fs_sheet_content&gt;-cell_value ).
        write lc_value to lv_time USING EDIT MASK &apos;__:__:__&apos;.
        lc_value = lv_time.
      WHEN OTHERS.
        lc_value = &lt;fs_sheet_content&gt;-cell_value.

    ENDCASE.

*    REPLACE ALL OCCURRENCES OF &apos;&quot;&apos; in lc_value with &apos;&quot;&quot;&apos;.
    CONCATENATE zcl_excel_writer_csv=&gt;enclosure zcl_excel_writer_csv=&gt;enclosure INTO lv_tmp.
    CONDENSE lv_tmp.
    REPLACE ALL OCCURRENCES OF zcl_excel_writer_csv=&gt;enclosure in lc_value with lv_tmp.

*    FIND FIRST OCCURRENCE OF &apos;;&apos; IN lc_value.
    FIND FIRST OCCURRENCE OF zcl_excel_writer_csv=&gt;delimiter IN lc_value.
    IF sy-subrc = 0.
      CONCATENATE lv_string zcl_excel_writer_csv=&gt;enclosure lc_value zcl_excel_writer_csv=&gt;enclosure INTO lv_string.
    ELSE.
      CONCATENATE lv_string lc_value INTO lv_string.
    ENDIF.

  ENDLOOP. &quot; AT lt_cell_data

  CLEAR ep_content.

  CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
    EXPORTING
      TEXT           = lv_string
*      MIMETYPE       = &apos; &apos;
*   ENCODING       =
    IMPORTING
      BUFFER         = ep_content
    EXCEPTIONS
      FAILED         = 1
      OTHERS         = 2
          .

  endmethod.</source>
 </method>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ACTIVE_SHEET_INDEX" VERSION="1" LANGU="E" DESCRIPT="Activate worksheet by index before the CSV file creation" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ACTIVE_SHEET_INDEX" SCONAME="I_ACTIVE_WORKSHEET" VERSION="1" LANGU="E" DESCRIPT="Active Worksheet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZEXCEL_ACTIVE_WORKSHEET"/>
  <source>method SET_ACTIVE_SHEET_INDEX.
  CLEAR WORKSHEET_NAME.
  WORKSHEET_INDEX = i_active_worksheet.
  endmethod.</source>
 </method>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ACTIVE_SHEET_INDEX_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Activate worksheet by name before the CSV file creation" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ACTIVE_SHEET_INDEX_BY_NAME" SCONAME="I_WORKSHEET_NAME" VERSION="1" LANGU="E" DESCRIPT="Worksheets name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZEXCEL_WORKSHEETS_NAME"/>
  <source>method SET_ACTIVE_SHEET_INDEX_BY_NAME.
  CLEAR WORKSHEET_INDEX.
  WORKSHEET_NAME = i_worksheet_name.
  endmethod.</source>
 </method>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_DELIMITER" VERSION="1" LANGU="E" DESCRIPT="Set Delimiter value" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_DELIMITER" SCONAME="IP_VALUE" VERSION="1" LANGU="E" DESCRIPT="Delimiter Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;;&apos;"/>
  <source>method SET_DELIMITER.
  delimiter = ip_value.
  endmethod.</source>
 </method>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ENCLOSURE" VERSION="1" LANGU="E" DESCRIPT="Set Enclosure character" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ENCLOSURE" SCONAME="IP_VALUE" VERSION="1" LANGU="E" DESCRIPT="Text field enclosure character" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;&quot;&apos;"/>
  <source>method SET_ENCLOSURE.
  zcl_excel_writer_csv=&gt;enclosure = ip_value.
  endmethod.</source>
 </method>
 <method CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ENDOFLINE" VERSION="1" LANGU="E" DESCRIPT="Set End Of Line character" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_EXCEL_WRITER_CSV" CMPNAME="SET_ENDOFLINE" SCONAME="IP_VALUE" VERSION="1" LANGU="E" DESCRIPT="End Of Line Character" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PARVALUE="CL_ABAP_CHAR_UTILITIES=&gt;CR_LF"/>
  <source>method SET_ENDOFLINE.
  zcl_excel_writer_csv=&gt;eol = ip_value.
  endmethod.</source>
 </method>
</CLAS>
