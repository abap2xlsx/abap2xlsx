<?xml version="1.0" encoding="utf-8"?>
<PROG NAME="ZDEMO_EXCEL30" VARCL="X" SUBC="1" RSTAT="T" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
 <textPool>
  <language SPRAS="E">
   <textElement ID="R" ENTRY="abap2xlsx Demo: ABAP Cell data types" LENGTH="37 "/>
   <textElement ID="S" KEY="P_PATH" ENTRY="D       ." LENGTH="9 "/>
  </language>
 </textPool>
 <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZDEMO_EXCEL1
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  zdemo_excel30.

DATA: lo_excel                TYPE REF TO zcl_excel,
      lo_worksheet            TYPE REF TO zcl_excel_worksheet,
      lo_hyperlink            TYPE REF TO zcl_excel_hyperlink,
      column_dimension        TYPE REF TO zcl_excel_worksheet_columndime.


DATA: lv_value  TYPE string,
      lv_count  TYPE i VALUE 10,
      lv_packed TYPE p LENGTH 16 DECIMALS 1 VALUE &apos;1234567890.5&apos;.

CONSTANTS: lc_typekind_string TYPE abap_typekind VALUE cl_abap_typedescr=&gt;typekind_string,
           lc_typekind_packed TYPE abap_typekind VALUE cl_abap_typedescr=&gt;typekind_packed,
           lc_typekind_num    TYPE abap_typekind VALUE cl_abap_typedescr=&gt;typekind_num,
           lc_typekind_date   TYPE abap_typekind VALUE cl_abap_typedescr=&gt;typekind_date,
           lc_typekind_s_ls   TYPE string VALUE &apos;s_leading_blanks&apos;.

CONSTANTS: gc_save_file_name TYPE string VALUE &apos;30_CellDataTypes.xlsx&apos;.
INCLUDE zdemo_excel_outputopt_incl.


START-OF-SELECTION.

  &quot; Creates active sheet
  CREATE OBJECT lo_excel.

  &quot; Get active sheet
  lo_worksheet = lo_excel-&gt;get_active_worksheet( ).
  lo_worksheet-&gt;set_title( ip_title = &apos;Cell data types&apos; ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;A&apos; ip_row = 1 ip_value = &apos;Number as String&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;A&apos; ip_row = 2 ip_value = &apos;11&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;B&apos; ip_row = 1 ip_value = &apos;String&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;B&apos; ip_row = 2 ip_value = &apos; String with leading spaces&apos;
                          ip_data_type = lc_typekind_s_ls ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;B&apos; ip_row = 3 ip_value = &apos; Negative Value&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;C&apos; ip_row = 1 ip_value = &apos;Packed&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;C&apos; ip_row = 2 ip_value = &apos;50000.01-&apos;
                          ip_abap_type = lc_typekind_packed ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;D&apos; ip_row = 1 ip_value = &apos;Number with Percentage&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;D&apos; ip_row = 2 ip_value = &apos;0 %&apos;
                          ip_abap_type = lc_typekind_num ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;E&apos; ip_row = 1 ip_value = &apos;Date&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;E&apos; ip_row = 2 ip_value = &apos;20110831&apos;
                          ip_abap_type = lc_typekind_date ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;B&apos; ip_row = 3 ip_value = &apos;Positive Value&apos;
                          ip_abap_type = lc_typekind_string ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;C&apos; ip_row = 3 ip_value = &apos;5000.02&apos;
                          ip_abap_type = lc_typekind_packed ).
  lo_worksheet-&gt;set_cell( ip_column = &apos;D&apos; ip_row = 3 ip_value = &apos;50 %&apos;
                          ip_abap_type = lc_typekind_num ).

  WHILE lv_count &lt;= 15.
    lv_value = lv_count.
    CONCATENATE &apos;Positive Value with&apos; lv_value &apos;Digits&apos; INTO lv_value SEPARATED BY space.
    lo_worksheet-&gt;set_cell( ip_column = &apos;B&apos; ip_row = lv_count ip_value = lv_value
                            ip_abap_type = lc_typekind_string ).
    lo_worksheet-&gt;set_cell( ip_column = &apos;C&apos; ip_row = lv_count ip_value = lv_packed
                            ip_abap_type = lc_typekind_packed ).
    CONCATENATE &apos;Positive Value with&apos; lv_value &apos;Digits formated as string&apos; INTO lv_value SEPARATED BY space.
    lo_worksheet-&gt;set_cell( ip_column = &apos;D&apos; ip_row = lv_count ip_value = lv_value
                            ip_abap_type = lc_typekind_string ).
    lo_worksheet-&gt;set_cell( ip_column = &apos;E&apos; ip_row = lv_count ip_value = lv_packed
                            ip_abap_type = lc_typekind_string ).
    lv_packed = lv_packed * 10.
    lv_count  = lv_count + 1.
  ENDWHILE.

  column_dimension = lo_worksheet-&gt;get_column_dimension( ip_column = &apos;A&apos; ).
  column_dimension-&gt;set_auto_size( abap_true ).
  column_dimension = lo_worksheet-&gt;get_column_dimension( ip_column = &apos;B&apos; ).
  column_dimension-&gt;set_auto_size( abap_true ).
  column_dimension = lo_worksheet-&gt;get_column_dimension( ip_column = &apos;C&apos; ).
  column_dimension-&gt;set_auto_size( abap_true ).
  column_dimension = lo_worksheet-&gt;get_column_dimension( ip_column = &apos;D&apos; ).
  column_dimension-&gt;set_auto_size( abap_true ).
  column_dimension = lo_worksheet-&gt;get_column_dimension( ip_column = &apos;E&apos; ).
  column_dimension-&gt;set_auto_size( abap_true ).




*** Create output
  lcl_output=&gt;output( lo_excel ).</source>
</PROG>
